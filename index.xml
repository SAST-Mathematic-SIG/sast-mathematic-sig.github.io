<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on SAST.Mathematics SIG</title><link>https://example.org/</link><description>Recent content in Introduction on SAST.Mathematics SIG</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://example.org/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://example.org/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://example.org/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://example.org/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://example.org/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8pr%E6%8F%90%E4%BA%A4%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8pr%E6%8F%90%E4%BA%A4%E6%96%87%E6%A1%A3/</guid><description> 使用pull request提交文档 # 本站部署基于 SAST-Mathematics-SIG 下的三个Github仓库
Mathematics_SIG_Blog: *.md 文档全都置于这个仓库中 blog_deploy_source: 一些 Blog 配置相关的仓库 sast-mathematics-sig.github.io: github page部署使用的仓库 采用这样的方案主要是为了让配置文件和文档本身分离，当你需要提交你的文档时，你需要
fork Mathematics_SIG_Blog仓库 在本地对这个仓库的内容进行修改 向上游仓库提起 pull request ，等待我们的回应 pull request 合入仓库，你的文档就能正常的在网页上显示了</description></item><item><title/><link>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E5%9F%BA%E7%A1%80markdown%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E5%9F%BA%E7%A1%80markdown%E8%AF%AD%E6%B3%95/</guid><description>基础markdown语法 # Markdown 是一种轻量级的“标记语言”，由 John Gruber 于 2004 年创建，Markdown 的语法十分简单，正是因为其轻量化的特点，才被众多写作爱好者广泛应用
前排提醒: 本文档只是搬运基本的 Markdown 语法并对其简单介绍，并不完整详尽的叙述 Markdown 的各种扩展功能，也不会探讨 Markdown 语法解析等高级内容，预知详情请移步至官方网站 前言 # 首先， Markdown 用于在纯文本文档中添加格式化元素，这意味着它只是将一份纯文本文档，加以一些标记使得其中的一部分内容会被特殊化的处理而已
在使用 Markdown 格式书写时，文本内容存储在带有 .md 或 .markdown 扩展名的纯文本文件中
例如 test.md ，你可以在里面像 .txt 一样书写文字，比如你写了一篇文章，标题title独占一行，在 Markdown 中，你可以将 title 改为 # title ，保存后，将该文本文件交由 arkdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式，接着你就会发现你的 # title 会被其对应成为一个一级标题
工具推荐 # 书写 Markdown 可以使用 Typora ，同样被推荐的是 vscode 的 markdown all in one 插件
基本语法 # 到了正片，接下来是简单的介绍基本语法的时间
标题语法 # 在某一行的开头使用 # 创建标题，使用n个井号意为 n 级标题，例如</description></item><item><title/><link>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E6%9C%AC%E7%AB%99%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.org/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E6%9C%AC%E7%AB%99%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/</guid><description>本站扩展语法——shortcodes # 本站使用hugo与hugo-book搭建，支持一些称之为shortcodes的markdown扩展语法，接下来我们就详细介绍一下
按钮 # 按钮其实是一个装饰后的超链接，它可以导向外部连接或者本地
例子 # {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}回到首页{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/SAST-Mathematics-SIG&amp;#34; &amp;gt;}}前往SIG的GITHUB组织{{&amp;lt; /button &amp;gt;}} 回到首页 前往SIG的GITHUB组织 细节展示 # 细节展示(Details)是一个展开的栏目，可以隐藏一些信息
例子 # {{&amp;lt; details &amp;#34;Title&amp;#34; [open] &amp;gt;}} ### 内容 细节展示(Details)是... {{&amp;lt; /details &amp;gt;}} {{&amp;lt; details title=&amp;#34;Title&amp;#34; open=true &amp;gt;}} ### 内容 细节展示(Details)是... {{&amp;lt; /details &amp;gt;}} Title 内容 # 细节展示(Details)是&amp;hellip;
分列 # 分列(Columns)有助于组织简短的文字，使之排版更加清晰可读
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne.</description></item><item><title/><link>https://example.org/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.org/menu/</guid><description> 贡献须知 本站文档编写教程 基础markdown语法 本站扩展语法——shortcodes</description></item></channel></rss>