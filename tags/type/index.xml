<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Type on SAST.Mathematics SIG</title><link>https://example.org/tags/type/</link><description>Recent content in Type on SAST.Mathematics SIG</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 24 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://example.org/tags/type/index.xml" rel="self" type="application/rss+xml"/><item><title>A kind explanation to Monad(Haskell)</title><link>https://example.org/posts/a_kind_explanation_to_monad/</link><pubDate>Sat, 24 Aug 2024 00:00:00 +0000</pubDate><guid>https://example.org/posts/a_kind_explanation_to_monad/</guid><description>&lt;p>几乎是每个接触 Haskell 的朋友的必然，我们会尝试对 &lt;code>Monad&lt;/code> 给出一个解释，不为别的，只是因为 &lt;code>Monad&lt;/code> 在 Haskell 中避无可避的重要性，让我们不得不对这么做&lt;/p></description></item><item><title>一份抽象的类型抽象指北</title><link>https://example.org/posts/an_abstract_guide_to_type_abstraction/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://example.org/posts/an_abstract_guide_to_type_abstraction/</guid><description>&lt;blockquote>
&lt;p>内存本非数，类型亦无形。编译不报错，运行未必行。&lt;/p>
&lt;/blockquote>
&lt;p>程序设计常常涉及类型的抽象。你是否在一些库的文档中看过各种类型，却觉得它们过于抽象？动辄几十几百个成员的枚举类型，总是报错的类型约束，永远设计不出的 trait，以及程序运行时无尽的 panic……看完今天的介绍，不说你是醍醐灌顶，至少也算得上是毫无收获。&lt;/p></description></item><item><title>Subtyping variance and its application</title><link>https://example.org/posts/subtyping_variance_and_its_application/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://example.org/posts/subtyping_variance_and_its_application/</guid><description>&lt;p>子类型型变及其应用&lt;/p></description></item></channel></rss>