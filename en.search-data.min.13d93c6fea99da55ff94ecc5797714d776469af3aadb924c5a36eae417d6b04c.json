[{"id":0,"href":"/docs/contribute_helper/","title":"贡献须知","section":"Docs","content":" 贡献须知 # 该板块记录一些关于本站的一些基本信息，这些信息会为您为本站提交文档做出帮助\n"},{"id":1,"href":"/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/","title":"文档编写教程","section":"贡献须知","content":" 文档编写教程 # 这一部分有助于您更好的向这个网站提交您的内容\n您可能需要的基本信息 # 首先需要了解我们这个网站的基本信息，该网站部署在Github Page，这是一个可以直接从GitHub存储库托管的网页，而GitHub是一个共享和贡献开源软件的流行平台，您可以把代码存储在它所提供的仓库中，我们的网页正是由这样的仓库所构建成的\nINFO: GitHub中大量使用Git作为版本控制工具，如果您不知道Git是什么，您只须知道Git可以往您的仓库中提交内容 在这个网站中每一份文档都是用Markdown书写，这是一种轻量的标记语言，其实就是在普通文本的基础上稍作渲染，使用它可以完成简单的记笔记等工作，也正是如此，博客等性质的文字很适合使用Markdown来写\n您可能需要的教程 # 由上一部分可知，想要提交您的文档，您需要了解\nMarkdown的基本语法，熟练使用Markdown进行文档编写： 基础markdown语法 本站扩展语法——shortcodes GitHub的使用，学会使用Git： 如何向仓库提交PR "},{"id":2,"href":"/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E4%BD%BF%E7%94%A8pr%E6%8F%90%E4%BA%A4%E6%96%87%E6%A1%A3/","title":"使用pr提交文档","section":"文档编写教程","content":" 使用pull request提交文档 # 本站部署基于 SAST-Mathematics-SIG 下的三个Github仓库\nMathematics_SIG_Blog: *.md 文档全都置于这个仓库中 blog_deploy_source: 一些 Blog 配置相关的仓库 sast-mathematics-sig.github.io: github page部署使用的仓库 采用这样的方案主要是为了让配置文件和文档本身分离，当你需要提交你的文档时，你需要\nfork Mathematics_SIG_Blog仓库 在本地对这个仓库的内容进行修改 向上游仓库提起 pull request ，等待我们的回应 pull request 合入仓库，你的文档就能正常的在网页上显示了 pull request 教程 # 当你对本地 fork 的仓库进行了一些修改之后，你的仓库是长这样的 点击 Contribute ，并点击 Open pull request 接着你就可以进入提交 pr 的界面了，注意，请你指定一个 Reviewer 来检查你的提交，Assignees 请你指定你自己\n创建完成后，你可以在仓库的 pull request 处看见自己提交的 pr，你需要等待 Reviewer 检查后方可合入\n"},{"id":3,"href":"/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E5%9F%BA%E7%A1%80markdown%E8%AF%AD%E6%B3%95/","title":"基础markdown语法","section":"文档编写教程","content":" 基础markdown语法 # Markdown 是一种轻量级的“标记语言”，由 John Gruber 于 2004 年创建，Markdown 的语法十分简单，正是因为其轻量化的特点，才被众多写作爱好者广泛应用\n前排提醒: 本文档只是搬运基本的 Markdown 语法并对其简单介绍，并不完整详尽的叙述 Markdown 的各种扩展功能，也不会探讨 Markdown 语法解析等高级内容，预知详情请移步至官方网站 前言 # 首先， Markdown 用于在纯文本文档中添加格式化元素，这意味着它只是将一份纯文本文档，加以一些标记使得其中的一部分内容会被特殊化的处理而已\n在使用 Markdown 格式书写时，文本内容存储在带有 .md 或 .markdown 扩展名的纯文本文件中\n例如 test.md ，你可以在里面像 .txt 一样书写文字，比如你写了一篇文章，标题title独占一行，在 Markdown 中，你可以将 title 改为 # title ，保存后，将该文本文件交由 arkdown 处理器（也通常称为“解析器”或“实现”）的东西将获取到的 Markdown 格式的文本输出为 HTML 格式，接着你就会发现你的 # title 会被其对应成为一个一级标题\n工具推荐 # 书写 Markdown 可以使用 Typora ，同样被推荐的是 vscode 的 markdown all in one 插件\n基本语法 # 到了正片，接下来是简单的介绍基本语法的时间\n标题语法 # 在某一行的开头使用 # 创建标题，使用n个井号意为 n 级标题，例如\n# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 注意到井号串后方需要加一个空格，这是出于兼容性的合理考虑\n段落 # Markdown中的段落是指一段话和一段话之间固定的分隔，要想实现这个，需要在两段话中添加空白行\n不要在段落的开头使用空格和tab制表符来缩进 换行 # 在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行，注意和上面所说的段落不相同，这里的换行还是属于同一个段落的\n强调 # 强调分为粗体与斜体\n上面这句话就是一个最好的例子，使用单星号包裹文字为斜体，双星号为粗体\n强调分为**粗体**与*斜体* 而如果需要同时用粗体和斜体突出显示文本，需在单词或短语的前后各添加三个星号或下划线。\n以下均为粗斜体 ***1*** _**2**_ __*3*__ ___4___ 要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各添加三个星号，中间不要带空格\nThis is really***very***important text. 引用 # 要创建块引用，请在段落前添加一个 \u0026gt; 符号 块引用可以包含多个段落。为段落之间的空白行添加一个 \u0026gt; 符号 块引用可以嵌套。在要嵌套的段落前添加一个 \u0026gt;\u0026gt; 符号 块引用可以包含其他 Markdown 格式的元素。但并非所有元素都可以使用\n\u0026gt; 123 \u0026gt; 123 \u0026gt; \u0026gt; 456 \u0026gt; 123 \u0026gt;\u0026gt; 456 \u0026gt; 789 列表 # 向下面这样用序号与缩进创建有序列表，用破折号-、星号*或加号+创建无序列表\n1. 2. 3. 1. 2. 4. - - - - - Use `code` in your Markdown file.\n代码 # 要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。 要创建代码块，请将代码块的每一行缩进至少四个空格或一个制表符。\n分割线 # 在某一行写超过三个---创建分割线 效果演示如下，为了兼容性，请在分隔线的前后均添加空白行。\n图片 # 语法如下\n![photo alt](photo url \u0026#34;photo title\u0026#34;) 如果你要给图片增加链接，请将图像的Markdown 括在方括号中，然后将链接添加在圆括号中。\n[![photo alt](photo url \u0026#34;photo title\u0026#34;)](link url) 链接 # 以下是创建一个链接基本的语法，只会显示一个连接的名字，例如本站首页\n[本站首页](https://sast-mathematic-sig.github.io) 如果要设置一个鼠标放在上面悬浮的标签的话语法如下，例如本站首页\n[本站首页](https://sast-mathematic-sig.github.io \u0026#34;数学SIG首页\u0026#34;) 快捷创建一个链接可以用\u0026lt;\u0026gt;包裹一个url或者email\n强调链接, 在链接语法前后增加星号。要将链接表示为代码，请在方括号中添加反引号。\n参考文献 # [1]. Markdown 官方教程 https://markdown.com.cn/\n"},{"id":4,"href":"/docs/contribute_helper/%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E6%95%99%E7%A8%8B/%E6%9C%AC%E7%AB%99%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95/","title":"本站扩展语法","section":"文档编写教程","content":" 本站扩展语法——shortcodes # 本站使用hugo与hugo-book搭建，支持一些称之为shortcodes的markdown扩展语法，接下来我们就详细介绍一下\n按钮 # 按钮其实是一个装饰后的超链接，它可以导向外部连接或者本地\n例子 # {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}回到首页{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/SAST-Mathematics-SIG\u0026#34; \u0026gt;}}前往SIG的GITHUB组织{{\u0026lt; /button \u0026gt;}} 回到首页 前往SIG的GITHUB组织 细节展示 # 细节展示(Details)是一个展开的栏目，可以隐藏一些信息\n例子 # {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ### 内容 细节展示(Details)是... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ### 内容 细节展示(Details)是... {{\u0026lt; /details \u0026gt;}} Title 内容 # 细节展示(Details)是\u0026hellip;\n分列 # 分列(Columns)有助于组织简短的文字，使之排版更加清晰可读\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} 例子 # 左段落 # 左段落内容\u0026hellip;\n#include \u0026lt;iostream\u0026gt; int main(){ std::cout \u0026lt;\u0026lt;\u0026#34;hello world\u0026#34;; } 中段落 # 中段落内容\u0026hellip;\nWARNING: 注意在分栏中不能使用扩展语法\n右段落 # 右段落内容\u0026hellip;\nSAST.Mathematics SIG\n高亮 # 高亮是一种不同颜色的引用块， 有三种颜色可以被选择: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **内容** 这里是*[info|warning|danger]*喵 {{\u0026lt; /hint \u0026gt;}} 例子 # 内容\n这里是 Info 喵 内容\n这里是 warning 喵 内容\n这里是 danger 喵 KaTeX # KaTeX 可以让你在Markdown中插入Latex公式，在本站相当重要。详情可见 KaTeX\n{{\u0026lt; katex \u0026gt;}}\\pi(x){{\u0026lt; /katex \u0026gt;}} //这是行内公式 {{\u0026lt; katex display=true class=\u0026#34;optional\u0026#34; \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} // 这是行外公式 注意 对于行外公式，你也可以使用markdown自带的写法，甚至更加推荐这种写法\n$$a^2+b^2=c^2$$ $$a^2+b^2=c^2$$\n显示模式/例子 # 这里是行内公式: \\(\\pi(x)\\) 下面是行外公式, 具有display: block属性\n\\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\] 文本可以在这里继续\ntabs # tabs 有助于你组织不同情况下不同的文本\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example # MacOS MacOS # 这是 MacOS 的tab内容\nSAST.Mathematics SIG\nLinux Linux # 这是 Linux 的tab内容\nSAST.Mathematics SIG\nWindows Windows # 这是 Windows 的tab内容\nSAST.Mathematics SIG\nMermaid 图表 # MermaidJS 是用于从文本生成 svg 图表和图表的库\n覆盖Mermaid的初始化配置\n要覆盖 Mermaid 的初始化配置，请在 assets 文件夹中创建一个 mermaid.json 文件！\n例子 # {{\u0026lt; mermaid class=\u0026#34;optional\u0026#34; \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u0026gt; State2 note left of State2 : This is the note to the left. {{\u0026lt; /mermaid \u0026gt;}} stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. "},{"id":5,"href":"/menu/","title":"Index","section":"Introduction","content":" 贡献须知 本站文档编写教程 基础markdown语法 本站扩展语法——shortcodes "},{"id":6,"href":"/posts/%E4%B8%80%E4%BB%BD%E6%8A%BD%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%8A%BD%E8%B1%A1%E6%8C%87%E5%8C%97/","title":"一份抽象的类型抽象指北","section":"博客","content":" 内存本非数，类型亦无形。编译不报错，运行未必行。\n程序设计常常涉及类型的抽象。你是否在一些库的文档中看过各种类型，却觉得它们过于抽象？动辄几十几百个成员的枚举类型，总是报错的类型约束，永远设计不出的 trait，以及程序运行时无尽的 panic……看完今天的介绍，不说你是醍醐灌顶，至少也算得上是毫无收获。\n引子 # 除法 # fn div(a: u32, b: u32) -\u0026gt; u32 { a / b } fn main() { div(6, 3); // 2 div(5, 1); // 5 div(4, 0); // panic! } 函数明明定义为 fn(u32, u32) -\u0026gt; u32，但却不一定总能返回 u32 类型的值。这是一种意外行为（虽然你大概也许知道 0 不能作为除数，所以你可能或许毫不意外）。\n虽然 Rust 标准库文档说明了除法可能 panic，但是正经人谁看文档啊，下贱，但是文档里面的备注容易被忽略，而这种把潜在错误留到运行时的行为很容易导致意外崩溃。\n对此，我们可以用两种方法在类型层面解决：\n限制除数类型为非零整数，如采用 NonZero\u0026lt;u32\u0026gt; 类型： 相当于定义： fn div(a: u32, b: NonZero\u0026lt;u32\u0026gt;) -\u0026gt; u32 { a / b.get() } 运行时检查可能的错误，返回可能失败的结果，如 checked_div 函数： 颜色 # 如何定义 Color 类型？\nString？（\u0026quot;black\u0026quot;、\u0026quot;white\u0026quot;、\u0026quot;red\u0026quot;、\u0026quot;rgb(0 0 255)\u0026quot;、\u0026quot;#00FF00\u0026quot;……） RGB (u8, u8, u8)（真彩色）？ RGBA (u8, u8, u8, u8)？ f32？f64？ 16 色？256 色（u8）？ 0bRRRGGGBB？ ANSI？ ANSI 256 色:\nany？ 颜色空间:\n你永远无法定义一个完美的 Color 类型！适合使用场景的类型才是最好的类型。\n以浏览器渲染流程为例，一个可能的类型工作流程是：\n在处理原始 CSS 颜色字符串时，使用 String CSS 解析后可以转为自定义的 enum 类型，类似于： /// Number range is extracted from /// \u0026lt;https://drafts.csswg.org/css-color/#color-type\u0026gt; #[non_exhaustive] enum Color { Transparent, Named(NamedColor), Hex(u32), // 0xRRGGBBAA Rgb(f32, f32, f32), // 0.0..=255.0 Rgba(f32, f32, f32, f32), // R/G/B: 0.0..=255.0, A: 0.0..=1.0 Hsl(f32, f32, f32), // H: 0.0..360.0, S/L: 0.0..100.0 Hsla(f32, f32, f32, f32), // Hwb, Lab, Lch, etc. } 内部可以表示为 RGBA 或其他颜色空间 处理完透明度混合后，最终渲染到像素点时采用 RGB 错误类型 # 在一个项目（crate）中，如何定义错误类型？\nString？（简单明了，但不够规范，难以本地化处理） Box\u0026lt;dyn Error\u0026gt;？anyhow::Error？（与 String 相比，规范了输出格式，但仍不够结构化，适合 bin crate） enum + #[derive(thiserror::Error)]？（结构化程度更高，但需要额外设计错误类型，适合 lib crate） any？ 好的类型抽象有哪些特点？ # 好的类型抽象应该抽象\n类型本质是一种集合。好的类型应该和良好定义的集合具有相似的性质。\n高一的数学课介绍了集合的三大性质：\n确定性：对于任意一个元素，它要么属于这个集合，要么不属于这个集合。 互异性：集合中的元素是互不相同的。 无序性：集合中的元素之间没有顺序关系。 其中无序性主要用于集合相等性的判定，不在这里讨论。\n对于确定性的要求，好的抽象应该满足：\n任何合法的概念都能以这个类型的值来表示。 任何非法的概念不能以这个类型的值来表示。 对于互异性的要求，好的抽象应该满足：\n在该类型的框架下，一个合法的概念只能有一种表示方式。 或者说，好的类型抽象和被抽象的概念同构（一一对应）。\n同时，好的类型抽象应该尽可能简单，不应该包含多余的信息。\n实战：任务调度 # 了解 typestate 设计模式。\n作者: Github@Jisu-Woniu Repo type-abstraction\n"}]